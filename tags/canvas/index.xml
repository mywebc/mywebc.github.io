<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>canvas - Tag - Asher&#39;s blog</title>
        <link>http://example.org/tags/canvas/</link>
        <description>canvas - Tag - Asher&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>2524729719@qq.com (陈晓拉尼-Asher)</managingEditor>
            <webMaster>2524729719@qq.com (陈晓拉尼-Asher)</webMaster><lastBuildDate>Sat, 30 Sep 2017 11:05:40 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/canvas/" rel="self" type="application/rss+xml" /><item>
    <title>canvas小案例：fly birds</title>
    <link>http://example.org/canvas%E5%B0%8F%E6%A1%88%E4%BE%8Bfly-birds/</link>
    <pubDate>Sat, 30 Sep 2017 11:05:40 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/canvas%E5%B0%8F%E6%A1%88%E4%BE%8Bfly-birds/</guid>
    <description><![CDATA[我们可以看到这个游戏由背景蓝天，土地，小鸟，管道四部分组成，在开始游戏我们必须保证全部加载完所有图片资源，这里书写一个函数传进所有图片资源，]]></description>
</item>
<item>
    <title>canvas画图API整理</title>
    <link>http://example.org/canvas%E7%94%BB%E5%9B%BEapi%E6%95%B4%E7%90%86/</link>
    <pubDate>Tue, 26 Sep 2017 07:51:10 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/canvas%E7%94%BB%E5%9B%BEapi%E6%95%B4%E7%90%86/</guid>
    <description><![CDATA[<blockquote>
<p>canvas 是 HTML5 提供的一个用于展示绘图效果的标签.
canvas 原意画布, 帆布. 在 HTML 页面中用于展示绘图效果. 基本语法：</p>
</blockquote>
<ol>
<li>使用 canvas 标签, 即可在页面中开辟一格区域. 可以设置其 width 和 height 设置该区域的尺寸.</li>
<li>默认 canvas 的宽高为 300 和 150.</li>
<li>不要使用 CSS 的方式设置宽高, 应该使用 HTML 属性.</li>
<li>如果浏览器不支持 canvas 标签, 那么就会将其解释为 div 标签. 因此常常在 canvas 中嵌入文本, 以提示用户浏览器的能力.</li>
<li>canvas 的兼容性非常强, 只要支持该标签的, 基本功能都一样, 因此不用考虑兼容性问题.</li>
<li>canvas 本身不能绘图. 是使用 JavaScript 来完成绘图. canvas 对象提供了各种绘图用的 api.
基本使用方法：</li>
<li>获得 canvas 对象.</li>
<li>调用 getContext 方法, 提供字符串参数 &lsquo;2d&rsquo;.</li>
<li>该方法返回 CanvasRenderingContext2D 类型的对象. 该对象提供基本的绘图命令.</li>
<li>使用 CanvasRenderingContext2D 对象提供的方法进行绘图.</li>
<li>基本绘图命令
<ul>
<li>设置开始绘图的位置: context.moveTo( x, y ).</li>
<li>设置直线到的位置: context.lineTo( x, y ).</li>
<li>描边绘制: context.stroke().</li>
<li>填充绘制: context.fill().</li>
<li>闭合路径: context.closePath().</li>
</ul>
</li>
</ol>]]></description>
</item>
</channel>
</rss>
