<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>JavaScript - Category - Asher&#39;s blog</title>
        <link>http://example.org/categories/javascript/</link>
        <description>JavaScript - Category - Asher&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>2524729719@qq.com (陈晓拉尼-Asher)</managingEditor>
            <webMaster>2524729719@qq.com (陈晓拉尼-Asher)</webMaster><lastBuildDate>Sun, 06 Jan 2019 17:56:20 &#43;0000</lastBuildDate><atom:link href="http://example.org/categories/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>手动实现一个简单的promise</title>
    <link>http://example.org/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise/</link>
    <pubDate>Sun, 06 Jan 2019 17:56:20 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/%E6%89%8B%E5%8A%A8%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AApromise/</guid>
    <description><![CDATA[一直在用promise，也想过自己能不能也实现一个简单的promise，但是一直没有时间；这不最近辞职了，时间就多起来了。当然也参考了网上很]]></description>
</item>
<item>
    <title>js设计模式之迭代器模式</title>
    <link>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Sun, 06 Jan 2019 14:20:23 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[迭代器模式是指提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。总结两点，第一顺序访问一个集合，第二使用者无需知]]></description>
</item>
<item>
    <title>js设计模式之状态模式</title>
    <link>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 02 Jan 2019 01:09:14 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[状态模式往往会带来代码量的增加，但是它也许是解决某些需求场景的最好方法，状态模式的关键是区分事物内部的状态，事物内部的状态往往会带来事物行为]]></description>
</item>
<item>
    <title>js设计模式之装饰者模式</title>
    <link>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 24 Dec 2018 23:48:13 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[装饰者模式能够在不改变对象自身的基础上，在程序运行期间给对象动态地添加指责，总结来说就是两点，第一为对象添加新功能，第二不改变原有的结构和功]]></description>
</item>
<item>
    <title>js设计模式之适配器模式</title>
    <link>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 17 Dec 2018 00:12:11 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[适配器模式是一种简单设计模式，主要是用来解决老接口不兼容的问题，对于不兼容的老接口，我们没必要重写，只需创建一个适配器即可。 获取城市接口例子]]></description>
</item>
<item>
    <title>js设计模式之代理模式</title>
    <link>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Wed, 05 Dec 2018 22:03:04 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[代理模式的定义：为一个对象提供代用品或占位符，以便控制对它的访问；注意使用者无权访问目标对象的。 最常见的就是科学上网了 代理模式根据其目的，也]]></description>
</item>
<item>
    <title>js设计模式之单例模式</title>
    <link>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Tue, 04 Dec 2018 23:44:21 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式的定义: 保证一个类仅有一个实例，并且提供一个访问它的全局访问点。意义为减少内存开支，减少变量冲突。 常见的应用场景 全局的window对]]></description>
</item>
<item>
    <title>总结一下JavaScript中的this</title>
    <link>http://example.org/%E8%B0%88%E4%B8%80%E8%B0%88javascript%E4%B8%AD%E7%9A%84this/</link>
    <pubDate>Tue, 16 Oct 2018 22:09:25 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/%E8%B0%88%E4%B8%80%E8%B0%88javascript%E4%B8%AD%E7%9A%84this/</guid>
    <description><![CDATA[有的时候我们总是被JavaScript中的this搞得晕头转向，因为它的不确定性，也被经常拿来当作考题，我们也经常听到网上最认同的说法：“谁]]></description>
</item>
<item>
    <title>TypeScript入门</title>
    <link>http://example.org/typescript%E5%85%A5%E9%97%A8/</link>
    <pubDate>Mon, 17 Sep 2018 23:25:48 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/typescript%E5%85%A5%E9%97%A8/</guid>
    <description><![CDATA[TypeScript主要提供了类型系统和对ES6的支持,对于一个需要长期维护的项目，使用TypeScript可以减少维护成本。使用VSCod]]></description>
</item>
<item>
    <title>ES6笔记（四）扩展对象的功能性</title>
    <link>http://example.org/es6%E7%AC%94%E8%AE%B0%E5%9B%9B%E6%89%A9%E5%B1%95%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%A7/</link>
    <pubDate>Tue, 03 Apr 2018 16:17:56 &#43;0000</pubDate>
    <author>陈晓拉尼-Asher</author>
    <guid>http://example.org/es6%E7%AC%94%E8%AE%B0%E5%9B%9B%E6%89%A9%E5%B1%95%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%A7/</guid>
    <description><![CDATA[<h3 id="对象的语法的扩展">对象的语法的扩展</h3>
<h4 id="1对象的属性或属性值可以直接传入变量">(1)对象的属性或属性值可以直接传入变量</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kd">let</span> <span class="nx">id</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="mi">22</span><span class="p">;</span> <span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span>:<span class="kt">value</span><span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div><h4 id="2在对象中方法的简写">(2)在对象中方法的简写</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ts" data-lang="ts"><span class="c1">//es5 
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="nx">handle</span>:<span class="kt">function</span><span class="p">(){</span> 
        <span class="c1">//dosomething 
</span><span class="c1"></span>        <span class="p">}</span> 
    <span class="p">}</span> 
<span class="c1">//es6 
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
     <span class="nx">handle</span><span class="p">(){</span> 
        <span class="c1">//dosomething 
</span><span class="c1"></span>        <span class="p">}</span> 
    <span class="p">}</span> 
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
</channel>
</rss>
